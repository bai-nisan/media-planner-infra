version: '3.8'

networks:
  temporal-network:
    driver: bridge
    name: temporal-network

volumes:
  temporal-postgres-data:
    driver: local
  temporal-elasticsearch-data:
    driver: local

services:
  # PostgreSQL Database for Temporal persistence
  temporal-postgres:
    image: postgres:15-alpine
    container_name: temporal-postgres
    environment:
      POSTGRES_DB: temporal
      POSTGRES_USER: temporal
      POSTGRES_PASSWORD: temporal
    volumes:
      - temporal-postgres-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"  # Use different port to avoid conflicts
    networks:
      - temporal-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch for advanced visibility (optional but recommended for production)
  temporal-elasticsearch:
    image: elasticsearch:7.17.9
    container_name: temporal-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - temporal-elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - temporal-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Temporal Server with auto-setup
  temporal-server:
    image: temporalio/auto-setup:1.22.0
    container_name: temporal-server
    depends_on:
      temporal-postgres:
        condition: service_healthy
      temporal-elasticsearch:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=temporal-postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - ENABLE_ES=true
      - ES_SEEDS=temporal-elasticsearch
      - ES_VERSION=v7
      - TEMPORAL_CLI_ADDRESS=temporal-server:7233
      - TEMPORAL_ADDRESS=0.0.0.0:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000,http://localhost:8080,https://lovable.dev,https://*.lovable.app
    ports:
      - "7233:7233"   # gRPC endpoint
      - "7234:7234"   # Membership port
      - "7235:7235"   # History service
      - "7239:7239"   # Worker service
    volumes:
      - ./temporal-config:/etc/temporal/config/dynamicconfig
    networks:
      - temporal-network
    healthcheck:
      test: ["CMD", "temporal", "workflow", "list", "--address", "temporal-server:7233"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Temporal Web UI
  temporal-web:
    image: temporalio/web:2.21.3
    container_name: temporal-web
    depends_on:
      temporal-server:
        condition: service_healthy
    environment:
      - TEMPORAL_ADDRESS=temporal-server:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000,http://localhost:8080,https://lovable.dev,https://*.lovable.app
      - TEMPORAL_PERMIT_WRITE_API=true
    ports:
      - "8088:8088"
    networks:
      - temporal-network
    restart: unless-stopped

  # Temporal Admin Tools (for management)
  temporal-admin-tools:
    image: temporalio/admin-tools:1.22.0
    container_name: temporal-admin-tools
    depends_on:
      temporal-server:
        condition: service_healthy
    environment:
      - TEMPORAL_ADDRESS=temporal-server:7233
    networks:
      - temporal-network
    command: ["sleep", "infinity"]  # Keep container running for admin commands
    restart: unless-stopped

  # Optional: Temporal CLI container for easy access
  temporal-cli:
    image: temporalio/cli:0.10.0
    container_name: temporal-cli
    depends_on:
      temporal-server:
        condition: service_healthy
    environment:
      - TEMPORAL_ADDRESS=temporal-server:7233
    networks:
      - temporal-network
    command: ["sleep", "infinity"]  # Keep container running for CLI access
    restart: unless-stopped 